"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Internal data type for capturing the class of event processed in App#onIncomingEvent()
 */
var IncomingEventType;
(function (IncomingEventType) {
    IncomingEventType[IncomingEventType["Event"] = 0] = "Event";
    IncomingEventType[IncomingEventType["Action"] = 1] = "Action";
    IncomingEventType[IncomingEventType["Command"] = 2] = "Command";
    IncomingEventType[IncomingEventType["Options"] = 3] = "Options";
})(IncomingEventType = exports.IncomingEventType || (exports.IncomingEventType = {}));
/**
 * Helper which finds the type and channel (if any) that any specific incoming event is related to.
 *
 * This is analogous to WhenEventHasChannelContext and the conditional type that checks SlackAction for a channel
 * context.
 */
function getTypeAndConversation(body) {
    if (body.event !== undefined) {
        const eventBody = body;
        return {
            type: IncomingEventType.Event,
            conversationId: eventBody.event.channel !== undefined ? eventBody.event.channel :
                eventBody.event.item !== undefined ? eventBody.event.item.channel : undefined,
        };
    }
    if (body.command !== undefined) {
        return {
            type: IncomingEventType.Command,
            conversationId: body.channel_id,
        };
    }
    if (body.name !== undefined || body.type === 'block_suggestion') {
        return {
            type: IncomingEventType.Options,
            conversationId: body.channel.id,
        };
    }
    if (body.actions !== undefined || body.type === 'dialog_submission' || body.type === 'message_action') {
        return {
            type: IncomingEventType.Action,
            conversationId: body.channel.id,
        };
    }
    return {};
}
exports.getTypeAndConversation = getTypeAndConversation;
/* istanbul ignore next */
/** Helper that should never be called, but is useful for exhaustiveness checking in conditional branches */
function assertNever(x) {
    throw new Error(`Unexpected object: ${x}`);
}
exports.assertNever = assertNever;
//# sourceMappingURL=helpers.js.map