"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const http_1 = require("http");
const express_1 = __importDefault(require("express"));
const axios_1 = __importDefault(require("axios"));
const raw_body_1 = __importDefault(require("raw-body"));
const querystring_1 = __importDefault(require("querystring"));
const crypto_1 = __importDefault(require("crypto"));
const tsscmp_1 = __importDefault(require("tsscmp"));
const errors_1 = require("./errors");
const logger_1 = require("@slack/logger");
/**
 * Receives HTTP requests with Events, Slash Commands, and Actions
 */
class ExpressReceiver extends events_1.EventEmitter {
    constructor({ signingSecret = '', logger = new logger_1.ConsoleLogger(), endpoints = { events: '/slack/events' } }) {
        super();
        this.app = express_1.default();
        this.app.use(this.errorHandler.bind(this));
        // TODO: what about starting an https server instead of http? what about other options to create the server?
        this.server = http_1.createServer(this.app);
        const expressMiddleware = [
            verifySignatureAndParseBody(logger, signingSecret),
            respondToSslCheck,
            respondToUrlVerification,
            this.requestHandler.bind(this),
        ];
        const endpointList = typeof endpoints === 'string' ? [endpoints] : Object.values(endpoints);
        for (const endpoint of endpointList) {
            this.app.post(endpoint, ...expressMiddleware);
        }
    }
    requestHandler(req, res) {
        let timer = setTimeout(() => {
            this.emit('error', receiverAckTimeoutError('An incoming event was not acknowledged before the timeout. ' +
                'Ensure that the ack() argument is called in your listeners.'));
            timer = undefined;
        }, 2800);
        const event = {
            body: req.body,
            ack: (response) => {
                // TODO: if app tries acknowledging more than once, emit a warning
                if (timer !== undefined) {
                    clearTimeout(timer);
                    timer = undefined;
                    if (!response)
                        res.send('');
                    if (typeof response === 'string') {
                        res.send(response);
                    }
                    else {
                        res.json(response);
                    }
                }
            },
            respond: undefined,
        };
        if (req.body && req.body.response_url) {
            event.respond = (response) => {
                axios_1.default.post(req.body.response_url, response)
                    .catch((e) => {
                    this.emit('error', e);
                });
            };
        }
        this.emit('message', event);
    }
    // TODO: the arguments should be defined as the arguments of Server#listen()
    // TODO: the return value should be defined as a type that both http and https servers inherit from, or a union
    start(port) {
        return new Promise((resolve, reject) => {
            try {
                // TODO: what about other listener options?
                // TODO: what about asynchronous errors? should we attach a handler for this.server.on('error', ...)?
                // if so, how can we check for only errors related to listening, as opposed to later errors?
                this.server.listen(port, () => {
                    resolve(this.server);
                });
            }
            catch (error) {
                reject(error);
            }
        });
    }
    // TODO: the arguments should be defined as the arguments to close() (which happen to be none), but for sake of
    // generic types
    stop() {
        return new Promise((resolve, reject) => {
            // TODO: what about synchronous errors?
            this.server.close((error) => {
                if (error) {
                    reject(error);
                    return;
                }
                resolve();
            });
        });
    }
    errorHandler(err, _req, _res, next) {
        this.emit('error', err);
        // Forward to express' default error handler (which knows how to print stack traces in development)
        next(err);
    }
}
exports.default = ExpressReceiver;
const respondToSslCheck = (req, res, next) => {
    if (req.body && req.body.ssl_check) {
        res.send();
        return;
    }
    next();
};
const respondToUrlVerification = (req, res, next) => {
    if (req.body && req.body.type && req.body.type === 'url_verification') {
        res.json({ challenge: req.body.challenge });
        return;
    }
    next();
};
/**
 * This request handler has two responsibilities:
 * - Verify the request signature
 * - Parse request.body and assign the successfully parsed object to it.
 */
function verifySignatureAndParseBody(logger, signingSecret) {
    return async (req, _res, next) => {
        try {
            // *** Request verification ***
            let stringBody;
            // On some environments like GCP (Google Cloud Platform),
            // req.body can be pre-parsed and be passed as req.rawBody here
            const preparsedRawBody = req.rawBody;
            if (preparsedRawBody !== undefined) {
                stringBody = preparsedRawBody.toString();
            }
            else {
                stringBody = (await raw_body_1.default(req)).toString();
            }
            const signature = req.headers['x-slack-signature'];
            const ts = Number(req.headers['x-slack-request-timestamp']);
            try {
                await verifyRequestSignature(signingSecret, stringBody, signature, ts);
            }
            catch (e) {
                return next(e);
            }
            // *** Parsing body ***
            // As the verification passed, parse the body as an object and assign it to req.body
            // Following middlewares can expect `req.body` is already a parsed one.
            // This handler parses `req.body` or `req.rawBody`(on Google Could Platform)
            // and overwrites `req.body` with the parsed JS object.
            const contentType = req.headers['content-type'];
            req.body = parseRequestBody(logger, stringBody, contentType);
            next();
        }
        catch (error) {
            next(error);
        }
    };
}
exports.verifySignatureAndParseBody = verifySignatureAndParseBody;
// TODO: this should be imported from another package
async function verifyRequestSignature(signingSecret, body, signature, requestTimestamp) {
    if (!signature || !requestTimestamp) {
        const error = errors_1.errorWithCode('Slack request signing verification failed. Some headers are missing.', errors_1.ErrorCode.ExpressReceiverAuthenticityError);
        throw error;
    }
    // Divide current date to match Slack ts format
    // Subtract 5 minutes from current time
    const fiveMinutesAgo = Math.floor(Date.now() / 1000) - (60 * 5);
    if (requestTimestamp < fiveMinutesAgo) {
        const error = errors_1.errorWithCode('Slack request signing verification failed. Timestamp is too old.', errors_1.ErrorCode.ExpressReceiverAuthenticityError);
        throw error;
    }
    const hmac = crypto_1.default.createHmac('sha256', signingSecret);
    const [version, hash] = signature.split('=');
    hmac.update(`${version}:${requestTimestamp}:${body}`);
    if (!tsscmp_1.default(hash, hmac.digest('hex'))) {
        const error = errors_1.errorWithCode('Slack request signing verification failed. Signature mismatch.', errors_1.ErrorCode.ExpressReceiverAuthenticityError);
        throw error;
    }
}
function parseRequestBody(logger, stringBody, contentType) {
    if (contentType === 'application/x-www-form-urlencoded') {
        const parsedBody = querystring_1.default.parse(stringBody);
        if (typeof parsedBody.payload === 'string') {
            return JSON.parse(parsedBody.payload);
        }
        else {
            return parsedBody;
        }
    }
    else if (contentType === 'application/json') {
        return JSON.parse(stringBody);
    }
    else {
        logger.warn(`Unexpected content-type detected: ${contentType}`);
        try {
            // Parse this body anyway
            return JSON.parse(stringBody);
        }
        catch (e) {
            logger.error(`Failed to parse body as JSON data for content-type: ${contentType}`);
            throw e;
        }
    }
}
function receiverAckTimeoutError(message) {
    const error = new Error(message);
    error.code = errors_1.ErrorCode.ReceiverAckTimeoutError;
    return error;
}
//# sourceMappingURL=ExpressReceiver.js.map